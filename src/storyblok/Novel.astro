---
import { storyblokEditable, useStoryblokApi } from '@storyblok/astro'
import { Image } from 'astro:assets';

const storyblokApi = useStoryblokApi();

const { blok, slug } = Astro.props;

const data = await storyblokApi.getAll(`cdn/stories`, {
    content_type: "Chapter",
    starts_with: `novels/${slug}`,
    version: "published",
    sort_by: "content.postDate:asc"
});

interface Chapter {
    name: string
    slug: string
}

const volumes = {};
for (let i = 1; i <= Number(blok.volumes); i++) {
    let chapters = data.filter((chapter) => Number(chapter.content.volumeNumber) === i);
    if (chapters.length === 0) { continue; }
    volumes[`Volume ${i}`] = (chapters.map((chapter) => {
        return { 
            name: `${chapter.content.displayName}: ${chapter.content.chapterTitle}`,
            slug: '/' + chapter.full_slug + '/'
        }
    }))
}

const epubLinks = Object.fromEntries(
    blok.epubs.tbody.map((row) => 
        [row.body[0].value, row.body[1].value]
    )
)

const volEntries = Object.entries(volumes)

console.log(volEntries)
const firstHref = volEntries[0][1][0].slug;
const lastHref = volEntries[volEntries.length - 1][1][volEntries[volEntries.length - 1][1].length - 1].slug;
---

<div class="container">
    <header>
        <div class="main">
            <Image src={blok.coverImage.filename} width=599 height=844 alt={`Cover illustration for ${blok.name}`} />
            <div class="info">
                <p><span class="status">{blok.status}</span> &nbsp;â€¢&nbsp; {blok.volumes} Volume(s) </p>
                <h1>{blok.name}</h1>
                <span><b>Raws:</b> <a href={blok.raws.url}>Linked Here</a></span>
                <p class="creators">
                    <span><b>Author:</b> {blok.author}</span>
                    <span><b>Illustrator:</b> {blok.illustrator}</span>
                </p>
                <p class="synposis">{blok.synopsis}</p>
                <div class="btnRow">
                    <a href={firstHref}>Read First</a>
                    <a href={lastHref}>Read Last</a>
                </div>
            </div>
        </div>
    </header>
    <main>
        <h1>Chapters</h1>
        <span id="chapterContent">
            {Object.entries(volumes).map(([volumeNumber, volume]) => {
                return (
                    <div class="vol">
                        <h4> {volumeNumber} </h4>
                        <span> <a href={epubLinks[volumeNumber]}>EPUBs/PDFs</a> </span>
                        {(volume as Chapter[]).map((chapter) => <a href={chapter.slug}>{chapter.name}</a>)}
                    </div>
                )
            })}
        </span>
    </main>
</div>

<style>
    #chapterContent {
        width: 40%;
    }
    .vol {
        display: flex;
        flex-direction: column;
        font-size: x-large;
        background-color: rgba(0, 0, 0, 0.2);
        padding: 30px;
        border-radius: 15px;
	margin-bottom: 15px;
    }

    .vol span {
        font-size: small;
        text-align: center;
        margin-bottom: 15px;
    }

    h4 {
        text-align: center;
        margin: 0;
        margin-bottom: 10px;
    }

    h3 {
        margin-bottom: 10px;
    }

    .info span {
        margin-top: 10px;
    }
    .btnRow {
        margin-top: 25px;
        width: 100%;
    }

    .btnRow a {
        display: inline-block;
        border: none;
        border-radius: 10px;
        text-decoration: none;
        color: #ffe2b2;
        background-color: rgba(213, 75, 75, 0.7);
        padding: 15px 15px;
        font-family: 'Montseratt Variable', sans-serif;
        font-weight: 500;
        text-transform: uppercase;
        font-size: 18px;
        width: 30%;
        transition: all 300ms ease;
        cursor: pointer;
        margin-right: 15px;
        text-align: center;
    }

    .btnRow a:hover {
        filter: brightness(70%);
    }

    .synposis {
        padding-top: 10px;
        width: 100%;
        text-align: justify;
    }
    .status {
        padding: 5px 10px;
        border-radius: 20px;
        background-color: #544835;
        font-size: 16px;
        width: 100%;
    }

    .creators {
        display: flex;
        width: 50% !important;
        justify-content: space-between;
    }

    .creators span {
        width: 40%;
    }

    .info p {
        margin: 0;
        margin-top: 10px;
        width: 100%;
    }

    .info h1 {
        margin: 0;
        margin-top: 10px;
        width: 100%;
    }

    .info {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        margin-left: 3%;
        margin-right: 0;
        padding-right: 0;
        font-size: 20px;
        font-family: 'Raleway Variable', sans-serif;
        color: #ffe2b2;

        width: 40%;
    }

    .main {
        position: relative;
        display: flex;
        justify-content: center;
        align-items: flex-start;

        width: 100%;
        top: 15%;
        height: min-content;
        padding: 50px 0;
    }

    .main > img {
        width: auto;
        height: 60vh;
        border-radius: 25px;
        box-shadow: 4px 4px 67px 0px rgba(104,169,230,0.7);
        transition: all 300ms ease;
    }

    .main > img:hover {
        transform: rotateX(-15deg) rotateZ(-5deg);
    }
    .container {
        display: flex;
        flex-direction: column;
        width: 100%;
        min-height: 100vh;
    }

    .container header {
        display: flex;
        width: 100%;

        padding-top: 6%;

        background-color: rgba(73, 9, 9, 0.3);
		backdrop-filter: blur(125px);

        justify-content: flex-start;
    }

    main {
        justify-content: center;
        align-items: center;

        padding: 60px 0;
        display: flex;
        flex-direction: column;
        flex: 1;
        width: 100%;
        height: 100%;
        background-color: rgba(213, 75, 75, 0.7);
        color: #ffe2b2;
        font-family: 'Raleway Variable', sans-serif;
    }

    .vol a {
        all: unset;
        cursor: pointer;
        transition: 300ms ease all;
        padding: 10px 0;
    }

    .vol a:hover {
        filter: brightness(70%);
    }

    @media only screen and (max-width: 768px) { 
        .btnRow {
            display: flex;
            width: 100%;
            justify-content: center;
            align-items: center;
        }

        .btnRow a {
            width: 20%;
        }

        .main {
            flex-direction: column;
            align-items: center;
            top: 10%;
        }

        .info {
            width: 90%;
            margin-top: 30px;
        }

        .main > img {
            height: auto;
            width: 50%;
        }

        .container header {
            flex-direction: column;
            height: 150vh;
        }

        main {
            height: 100%;
        }

        #chapterContent {
            width: unset;
            margin: 15px;
        }
    }
</style>
