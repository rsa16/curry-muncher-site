---
const { volumes, currentChapter, currentVolume } = Astro.props;

const nextChapter= volumes[currentVolume][currentChapter + 1];
const prevChapter = volumes[currentVolume][currentChapter - 1];
---
<div>
    <div id="selects">
        <select id="volumes">
            {Object.keys(volumes).map((volumeName, index) => {
                return (index + 1) === Number(currentVolume) ? 
                    <option selected value={volumeName}>{volumeName}</option> :
                    <option value={volumeName}>{volumeName}</option> 
            })}
        </select>
        <chapter-select data-volumes={JSON.stringify(volumes)}>
            <select id="chapters">
                {volumes[currentVolume].map(({ name, slug }) => {
                    let chapterIndex = volumes[currentVolume].findIndex((chapter) => chapter.name === name);
                    return chapterIndex === currentChapter ? 
                        <option selected value={slug}>{name}</option> : 
                        <option value={slug}>{name}</option>
                    })}
            </select>
        </chapter-select>
        
    </div>

    {prevChapter !== undefined && <a id="prevC" data-currChap={currentChapter} href={prevChapter.slug}>←</a>}
    {nextChapter !== undefined && <a id="nextC" data-currChap={currentChapter} href={nextChapter.slug}>→</a> }
</div>

<style>
    div {
        display: flex;

        justify-content: flex-end;
        align-items: center;
    }

    #selects {
        position: absolute;

        display: flex;
        left: 25px;
    }

    #chapters {
        width: 100% !important;
    }

    #volumes, #chapters {
        width: 30%;
        height: 30px;

        margin: 0 5px;
    }

    a {
        position: relative;

        all: unset;
        width: 60px;
        font-size: 45px;
        margin: 10px;

        color: white;
        cursor: pointer;

        transition: all 300ms ease;
    }

    a:hover {
        color: rgb(146, 39, 12);
    }

    @media only screen and (max-width: 768px) { 
        div {
            flex-direction: column;
            justify-content: center;
            height: 100%;
            width: 100%;
        }

        #selects {
            flex-direction: column;
            justify-content: center;
            align-items: center;

            left: 0;
            width: 100%;    
        }
        
        #volumes {
            margin-bottom: 10px;
        }

        a {
            position: relative;
            width: fit-content;
            height: fit-content;
            top: 7vh;
        }
    }
</style>

<script>
    document.addEventListener('astro:after-swap', () => {
        function sendMessage<T>(message: T) {
            const iframe = document.querySelector<HTMLIFrameElement>('iframe.giscus-frame');
            if (!iframe?.contentWindow) return;
            iframe.contentWindow.postMessage({ giscus: message }, 'https://giscus.app');
        }
        
        setTimeout(() => {
            sendMessage({
                setConfig: {
                    term: window.location.pathname.substr(1)
                }
            })
        }, 1000)
    });

    class ChapterSelect extends HTMLElement {
        dataset: DOMStringMap;
        select: HTMLSelectElement;
        currentVolume: any;

        constructor() {
            super();

            const volumeSelect: HTMLSelectElement = document.querySelector("select#volumes")!;

            let volumes = JSON.parse(this.getAttribute("data-volumes")!);
            this.select = this.querySelector("select")!;
            this.currentVolume = volumes[volumeSelect.value];

            volumeSelect?.addEventListener("change", (event) => {
                this.currentVolume = volumes[(event.target as HTMLSelectElement).value];
                this.generateSelectValues();
            })

            this.select?.addEventListener("change", (event) => {
                let url = (event.target as HTMLSelectElement).value;
                window.location.href = url;
            })
        }

        generateSelectValues() {
            this.select.options.length = 0;

            for (const { name, slug } of this.currentVolume) {
                let option = document.createElement("option");
                
                option.value = slug;
                option.text = name;

                this.select.add(option);
            }
        }
    }

    customElements.define('chapter-select', ChapterSelect)
</script>
