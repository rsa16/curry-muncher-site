---
import { useStoryblokApi } from '@storyblok/astro'
import StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { block } from 'sharp';

export async function getStaticPaths()  {
    const storyblokApi = useStoryblokApi();

    const { data } = await storyblokApi.get("cdn/stories", {
        content_type: "Novel",
        version: 'published'
    });

    let staticPaths = [];
    const novelSlugs = Object.values(data.stories).map((novel) => novel.slug);
    staticPaths.push(...novelSlugs.map((slug) => ({ params: { name: slug, slug: undefined}})));

    for (const novelSlug of novelSlugs) {
        const chapters = await storyblokApi.getAll("cdn/stories", {
            content_type: "Chapter",
            version: 'published'
        });

        staticPaths.push(...chapters.map((chapter) => ({ params: { name: novelSlug, slug: chapter.slug }})));
    }

    return staticPaths;
}

const { name, slug } = Astro.params;
const storyblokApi = useStoryblokApi();

const { data } = await storyblokApi.get(`cdn/stories/novels/${name}${slug !== undefined ? '/' + slug : ''}`, {
    version: 'published',
    resolve_relations: ["Chapter.novel"]
});

const story = data.story;
const title = story.content.component === "Chapter" ?
        `${story.content.displayName}: ${story.content.chapterTitle}` :
        story.content.name;

const desc = story.content.component === "Chapter" ?
    `Volume ${story.content.volumeNumber}:\n\n` + (story.content.content.content[0].content.map((obj) => obj.text).join('') + ' ' +
    story.content.content.content[1].content.map((obj) => obj.text).join('') + ' ' + 
    story.content.content.content[2].content.map((obj) => obj.text).join(''))
        .split(' ').slice(0, 35).join(' ') + '...' :
    story.content.synopsis;
---

<BaseLayout 
    title={title}
    desc={desc}
    image={story.content.component === "Chapter" ? 
        story.content.novel.content.coverImage.filename : 
        story.content.coverImage.url
    }
    type={{ 
        name: "article",
        properties: {
            section: story.content.component === "Chapter" ? 
                `${story.content.novel.content.name} - Vol ${story.content.volumeNumber}` : 
                story.content.name,
            
            published_time: story.first_published_at
        }
    }}
>
    <StoryblokComponent transition:animate="fade" slug={story.slug} blok={story.content} />
</BaseLayout>